// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResiBuy.Server.Infrastructure;

#nullable disable

namespace ResiBuy.Server.Migrations
{
    [DbContext(typeof(ResiBuyContext))]
    [Migration("20250827173302_add-seed-category_01")]
    partial class addseedcategory_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.AdditionalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("AdditionalDatas");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredCheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCheckingOut")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9b22285-6c42-4092-89af-dfeef9bc9c4e"),
                            Name = "Đồ điện tử",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ee5f681a-11fe-4589-bb7b-82d955085c45"),
                            Name = "Thời trang",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("729bf691-29fe-4fd6-a63a-162386d48b8b"),
                            Name = "Đồ gia dụng",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("81799016-7be9-4f75-a21b-6871e55435e1"),
                            Name = "Sách",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("125bfa69-e42a-4a0f-8726-7e9a27d6e31b"),
                            Name = "Thể thao",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("4556d7c0-3524-43a3-a9c3-0276f649fd33"),
                            Name = "Mỹ phẩm",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("7c50b56a-ad3b-486e-ae19-7dcc623dd486"),
                            Name = "Đồ chơi",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("dd262c2d-9354-4386-9089-d813a1ee4121"),
                            Name = "Thực phẩm",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("f88f0e98-f4d4-46b5-a069-1733b31ae8a9"),
                            Name = "Phụ kiện",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("bb4d2219-fd9e-4afb-a70a-208741f1b3f2"),
                            Name = "Nội thất",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2a161117-bb5d-464a-b616-ae887e54e483"),
                            Name = "Khác",
                            Status = true
                        });
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasIndex("ProductDetailId")
                        .IsUnique()
                        .HasFilter("[ProductDetailId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = "b88a2158-2472-45a4-8234-1fdf84f42763",
                            CategoryId = new Guid("c9b22285-6c42-4092-89af-dfeef9bc9c4e"),
                            Name = "thu-mua-do-dien-tu-1.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/string",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314488/string.jpg"
                        },
                        new
                        {
                            Id = "566b0849-18af-4289-9d76-bc938db11545",
                            CategoryId = new Guid("ee5f681a-11fe-4589-bb7b-82d955085c45"),
                            Name = "thoitrang.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/thoitrang_usekdn",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/thoitrang_usekdn.jpg"
                        },
                        new
                        {
                            Id = "18003ded-5b70-4241-8de0-91c6a3e57a72",
                            CategoryId = new Guid("729bf691-29fe-4fd6-a63a-162386d48b8b"),
                            Name = "dogiadung.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/dogiadung_u5cuyh",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/dogiadung_u5cuyh.jpg"
                        },
                        new
                        {
                            Id = "b3d4fa32-6013-4b97-b338-ef3a5eca71f2",
                            CategoryId = new Guid("81799016-7be9-4f75-a21b-6871e55435e1"),
                            Name = "sach.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/sach_w9rqwe",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/sach_w9rqwe.jpg"
                        },
                        new
                        {
                            Id = "5584e6b3-c84b-4601-abf9-e9ffe45db5ba",
                            CategoryId = new Guid("125bfa69-e42a-4a0f-8726-7e9a27d6e31b"),
                            Name = "thethao.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/thethao_mv34he",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314611/resibuy/thethao_mv34he.jpg"
                        },
                        new
                        {
                            Id = "eea36c66-1f61-4264-9967-7a99b700d79e",
                            CategoryId = new Guid("4556d7c0-3524-43a3-a9c3-0276f649fd33"),
                            Name = "mypham.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/mypham_iltnhv",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/mypham_iltnhv.jpg"
                        },
                        new
                        {
                            Id = "c684483c-c193-4d58-9100-9e7afbf3ac2b",
                            CategoryId = new Guid("7c50b56a-ad3b-486e-ae19-7dcc623dd486"),
                            Name = "dochoi.png",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/dochoi_rz7pys",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314611/resibuy/dochoi_rz7pys.png"
                        },
                        new
                        {
                            Id = "f8199e61-67e6-4d67-8582-01ab7c99fdae",
                            CategoryId = new Guid("dd262c2d-9354-4386-9089-d813a1ee4121"),
                            Name = "thucpham.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/thucpham_la23wq",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314611/resibuy/thucpham_la23wq.jpg"
                        },
                        new
                        {
                            Id = "ebde9144-f95a-42a2-b060-f15bfa0f08fd",
                            CategoryId = new Guid("f88f0e98-f4d4-46b5-a069-1733b31ae8a9"),
                            Name = "phukien.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/phukien_sct8nd",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/phukien_sct8nd.jpg"
                        },
                        new
                        {
                            Id = "83795a0a-c702-4c85-af9b-409e02ea0dc8",
                            CategoryId = new Guid("bb4d2219-fd9e-4afb-a70a-208741f1b3f2"),
                            Name = "noithat.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/v1/resibuy/noithat_steelt",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756314610/resibuy/noithat_steelt.jpg"
                        },
                        new
                        {
                            Id = "0f516356-03a3-49bd-932b-1056faa978f5",
                            CategoryId = new Guid("2a161117-bb5d-464a-b616-ae887e54e483"),
                            Name = "khac1.jpg",
                            ThumbUrl = "http://res.cloudinary.com/dhz6zqwxx/image/upload/c_fill,h_300,w_300/other",
                            Url = "https://res.cloudinary.com/dhz6zqwxx/image/upload/v1756315891/other.jpg"
                        });
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShipperId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.OrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutOfStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOutOfStock")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReportTarget")
                        .HasColumnType("int");

                    b.Property<string>("TargetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Shipper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("EndWorkTime")
                        .HasColumnType("real");

                    b.Property<DateTime?>("FirstTimeLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipping")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDelivered")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<float>("StartWorkTime")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LastLocationId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayFee")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateMark")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShipperId");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvatarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "adm_df",
                            CreatedAt = new DateTime(2025, 8, 28, 0, 33, 1, 487, DateTimeKind.Local).AddTicks(8977),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@123",
                            FullName = "Administrator",
                            IdentityNumber = "admin",
                            IsLocked = false,
                            PasswordHash = "$2a$11$Momsb6Ng/llGjgR6nrkxeeMGe1hi.a/xfMPTuMom52kDkaI7degue",
                            PhoneNumber = "admin",
                            ReportCount = 0,
                            Roles = "[\"ADMIN\"]",
                            UpdatedAt = new DateTime(2025, 8, 28, 0, 33, 1, 487, DateTimeKind.Local).AddTicks(9077)
                        });
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserRoom", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("UserRooms");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserVoucher", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinOrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.AdditionalData", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.ProductDetail", "ProductDetail")
                        .WithMany("AdditionalData")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Building", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Cart", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.CartItem", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.ProductDetail", "ProductDetail")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Event", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Store", null)
                        .WithMany("Events")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Image", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Image", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.ProductDetail", "ProductDetail")
                        .WithOne("Image")
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Image", "ProductDetailId");

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Image", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Order", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Room", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Shipper");

                    b.Navigation("ShippingAddress");

                    b.Navigation("Store");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.OrderItem", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.ProductDetail", "ProductDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Product", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.ProductDetail", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.RefreshToken", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Report", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "CreatedBy")
                        .WithMany("Reports")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Order", "Order")
                        .WithOne("Report")
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Report", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Review", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.ProductDetail", "ProductDetail")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Room", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Shipper", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Area", "LastLocation")
                        .WithMany("Shippers")
                        .HasForeignKey("LastLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("ResiBuy.Server.Infrastructure.Model.Shipper", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LastLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Store", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "Owner")
                        .WithMany("Stores")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Room", "Room")
                        .WithMany("Stores")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.TimeSheet", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Shipper", "Shipper")
                        .WithMany("TimeSheets")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserNotification", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserRoom", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.UserVoucher", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Voucher", b =>
                {
                    b.HasOne("ResiBuy.Server.Infrastructure.Model.Store", "Store")
                        .WithMany("Vouchers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Area", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Shippers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Category", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.ProductDetail", b =>
                {
                    b.Navigation("AdditionalData");

                    b.Navigation("CartItems");

                    b.Navigation("Image");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Room", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Stores");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Shipper", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Store", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.User", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("Cart");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("Stores");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserRooms");

                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("ResiBuy.Server.Infrastructure.Model.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
