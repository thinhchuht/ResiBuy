import { useState } from "react";
import { useEventHub, HubEventType } from "../../hooks/useEventHub";
import orderApi from "../../api/order.api";
import { useAuth } from "../../contexts/AuthContext";
import { useToastify } from "../../hooks/useToastify"; // ‚úÖ d√πng custom toast
// ƒê·∫£m b·∫£o b·∫°n c√≥ file useToastify nh∆∞ b·∫°n ƒë∆∞a ·ªü tr√™n

interface ReceiveOrderNotificationData {
  OrderId: string;
  TotalPrice: number;
  Note: string;
  StoreName: string;
  AssignedTime: string;
}

export default function OrderAlertPopup() {
  const [visible, setVisible] = useState(false);
  const [data, setData] = useState<ReceiveOrderNotificationData | null>(null);
  const { user } = useAuth();
  const toast = useToastify(); // ‚úÖ d√πng toast success/error

  useEventHub({
    [HubEventType.ReceiveOrderNotification]: (payload: unknown) => {
      if (typeof payload === "object" && payload !== null) {
        const p = payload as Record<string, unknown>;

        const parsed: ReceiveOrderNotificationData = {
          OrderId: (p.OrderId ?? p.orderId) as string,
          TotalPrice: (p.TotalPrice ?? p.totalPrice) as number,
          Note: (p.Note ?? p.note) as string,
          StoreName: (p.StoreName ?? p.storeName) as string,
          AssignedTime: (p.AssignedTime ?? p.assignedTime) as string,
        };

        if (
          parsed.OrderId &&
          parsed.TotalPrice !== undefined &&
          parsed.StoreName &&
          parsed.AssignedTime
        ) {
          setData(parsed);
          setVisible(true);
          console.log("üì¶ Nh·∫≠n ƒë∆°n h√†ng:", parsed);
        } else {
          console.warn("‚ùå Payload thi·∫øu th√¥ng tin c·∫ßn thi·∫øt:", payload);
        }
      } else {
        console.warn("‚ùå Payload kh√¥ng h·ª£p l·ªá:", payload);
      }
    },
  });

  const handleConfirm = async () => {
    if (!user?.id || !data?.OrderId) {
      toast.error("Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c ƒë∆°n h√†ng");
      return;
    }

    try {
      await orderApi.updateOrderStatusShip(
        data.OrderId, // orderId
        "ShippedAccepted", // tr·∫°ng th√°i m·ªõi
        user.id // shipperId
      );

      toast.success("ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n:", err);
      toast.error("Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng!");
    }

    setVisible(false);
  };

  if (!visible || !data) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-40">
      <div className="bg-white rounded-xl shadow-xl w-[400px] max-w-full p-6 animate-fade-in">
        <h2 className="text-xl font-bold text-green-700 mb-4 text-center">
          üöö ƒê∆°n h√†ng m·ªõi ƒë∆∞·ª£c g√°n!
        </h2>
        <div className="text-gray-800 space-y-2">
          <p>
            <strong>C·ª≠a h√†ng:</strong> {data.StoreName}
          </p>
          <p>
            <strong>Ghi ch√∫:</strong> {data.Note || "Kh√¥ng c√≥ ghi ch√∫"}
          </p>
          <p>
            <strong>T·ªïng ti·ªÅn:</strong> {data.TotalPrice.toLocaleString()} ƒë
          </p>
        </div>
        <div className="mt-6 flex justify-center">
          <button
            onClick={handleConfirm}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition"
          >
            X√°c nh·∫≠n
          </button>
        </div>
      </div>
    </div>
  );
}
